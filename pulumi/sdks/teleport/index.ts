// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessListArgs, AccessListState } from "./accessList";
export type AccessList = import("./accessList").AccessList;
export const AccessList: typeof import("./accessList").AccessList = null as any;
utilities.lazyLoad(exports, ["AccessList"], () => require("./accessList"));

export { AccessMonitoringRuleArgs, AccessMonitoringRuleState } from "./accessMonitoringRule";
export type AccessMonitoringRule = import("./accessMonitoringRule").AccessMonitoringRule;
export const AccessMonitoringRule: typeof import("./accessMonitoringRule").AccessMonitoringRule = null as any;
utilities.lazyLoad(exports, ["AccessMonitoringRule"], () => require("./accessMonitoringRule"));

export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { AuthPreferenceArgs, AuthPreferenceState } from "./authPreference";
export type AuthPreference = import("./authPreference").AuthPreference;
export const AuthPreference: typeof import("./authPreference").AuthPreference = null as any;
utilities.lazyLoad(exports, ["AuthPreference"], () => require("./authPreference"));

export { AutoupdateConfigArgs, AutoupdateConfigState } from "./autoupdateConfig";
export type AutoupdateConfig = import("./autoupdateConfig").AutoupdateConfig;
export const AutoupdateConfig: typeof import("./autoupdateConfig").AutoupdateConfig = null as any;
utilities.lazyLoad(exports, ["AutoupdateConfig"], () => require("./autoupdateConfig"));

export { AutoupdateVersionArgs, AutoupdateVersionState } from "./autoupdateVersion";
export type AutoupdateVersion = import("./autoupdateVersion").AutoupdateVersion;
export const AutoupdateVersion: typeof import("./autoupdateVersion").AutoupdateVersion = null as any;
utilities.lazyLoad(exports, ["AutoupdateVersion"], () => require("./autoupdateVersion"));

export { BotArgs, BotState } from "./bot";
export type Bot = import("./bot").Bot;
export const Bot: typeof import("./bot").Bot = null as any;
utilities.lazyLoad(exports, ["Bot"], () => require("./bot"));

export { ClusterMaintenanceConfigArgs, ClusterMaintenanceConfigState } from "./clusterMaintenanceConfig";
export type ClusterMaintenanceConfig = import("./clusterMaintenanceConfig").ClusterMaintenanceConfig;
export const ClusterMaintenanceConfig: typeof import("./clusterMaintenanceConfig").ClusterMaintenanceConfig = null as any;
utilities.lazyLoad(exports, ["ClusterMaintenanceConfig"], () => require("./clusterMaintenanceConfig"));

export { ClusterNetworkingConfigArgs, ClusterNetworkingConfigState } from "./clusterNetworkingConfig";
export type ClusterNetworkingConfig = import("./clusterNetworkingConfig").ClusterNetworkingConfig;
export const ClusterNetworkingConfig: typeof import("./clusterNetworkingConfig").ClusterNetworkingConfig = null as any;
utilities.lazyLoad(exports, ["ClusterNetworkingConfig"], () => require("./clusterNetworkingConfig"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DynamicWindowsDesktopArgs, DynamicWindowsDesktopState } from "./dynamicWindowsDesktop";
export type DynamicWindowsDesktop = import("./dynamicWindowsDesktop").DynamicWindowsDesktop;
export const DynamicWindowsDesktop: typeof import("./dynamicWindowsDesktop").DynamicWindowsDesktop = null as any;
utilities.lazyLoad(exports, ["DynamicWindowsDesktop"], () => require("./dynamicWindowsDesktop"));

export { GetAccessListArgs, GetAccessListResult, GetAccessListOutputArgs } from "./getAccessList";
export const getAccessList: typeof import("./getAccessList").getAccessList = null as any;
export const getAccessListOutput: typeof import("./getAccessList").getAccessListOutput = null as any;
utilities.lazyLoad(exports, ["getAccessList","getAccessListOutput"], () => require("./getAccessList"));

export { GetAccessMonitoringRuleArgs, GetAccessMonitoringRuleResult, GetAccessMonitoringRuleOutputArgs } from "./getAccessMonitoringRule";
export const getAccessMonitoringRule: typeof import("./getAccessMonitoringRule").getAccessMonitoringRule = null as any;
export const getAccessMonitoringRuleOutput: typeof import("./getAccessMonitoringRule").getAccessMonitoringRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAccessMonitoringRule","getAccessMonitoringRuleOutput"], () => require("./getAccessMonitoringRule"));

export { GetAppArgs, GetAppResult, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { GetAuthPreferenceArgs, GetAuthPreferenceResult, GetAuthPreferenceOutputArgs } from "./getAuthPreference";
export const getAuthPreference: typeof import("./getAuthPreference").getAuthPreference = null as any;
export const getAuthPreferenceOutput: typeof import("./getAuthPreference").getAuthPreferenceOutput = null as any;
utilities.lazyLoad(exports, ["getAuthPreference","getAuthPreferenceOutput"], () => require("./getAuthPreference"));

export { GetAutoupdateConfigArgs, GetAutoupdateConfigResult, GetAutoupdateConfigOutputArgs } from "./getAutoupdateConfig";
export const getAutoupdateConfig: typeof import("./getAutoupdateConfig").getAutoupdateConfig = null as any;
export const getAutoupdateConfigOutput: typeof import("./getAutoupdateConfig").getAutoupdateConfigOutput = null as any;
utilities.lazyLoad(exports, ["getAutoupdateConfig","getAutoupdateConfigOutput"], () => require("./getAutoupdateConfig"));

export { GetAutoupdateVersionArgs, GetAutoupdateVersionResult, GetAutoupdateVersionOutputArgs } from "./getAutoupdateVersion";
export const getAutoupdateVersion: typeof import("./getAutoupdateVersion").getAutoupdateVersion = null as any;
export const getAutoupdateVersionOutput: typeof import("./getAutoupdateVersion").getAutoupdateVersionOutput = null as any;
utilities.lazyLoad(exports, ["getAutoupdateVersion","getAutoupdateVersionOutput"], () => require("./getAutoupdateVersion"));

export { GetClusterMaintenanceConfigArgs, GetClusterMaintenanceConfigResult, GetClusterMaintenanceConfigOutputArgs } from "./getClusterMaintenanceConfig";
export const getClusterMaintenanceConfig: typeof import("./getClusterMaintenanceConfig").getClusterMaintenanceConfig = null as any;
export const getClusterMaintenanceConfigOutput: typeof import("./getClusterMaintenanceConfig").getClusterMaintenanceConfigOutput = null as any;
utilities.lazyLoad(exports, ["getClusterMaintenanceConfig","getClusterMaintenanceConfigOutput"], () => require("./getClusterMaintenanceConfig"));

export { GetClusterNetworkingConfigArgs, GetClusterNetworkingConfigResult, GetClusterNetworkingConfigOutputArgs } from "./getClusterNetworkingConfig";
export const getClusterNetworkingConfig: typeof import("./getClusterNetworkingConfig").getClusterNetworkingConfig = null as any;
export const getClusterNetworkingConfigOutput: typeof import("./getClusterNetworkingConfig").getClusterNetworkingConfigOutput = null as any;
utilities.lazyLoad(exports, ["getClusterNetworkingConfig","getClusterNetworkingConfigOutput"], () => require("./getClusterNetworkingConfig"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDynamicWindowsDesktopArgs, GetDynamicWindowsDesktopResult, GetDynamicWindowsDesktopOutputArgs } from "./getDynamicWindowsDesktop";
export const getDynamicWindowsDesktop: typeof import("./getDynamicWindowsDesktop").getDynamicWindowsDesktop = null as any;
export const getDynamicWindowsDesktopOutput: typeof import("./getDynamicWindowsDesktop").getDynamicWindowsDesktopOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicWindowsDesktop","getDynamicWindowsDesktopOutput"], () => require("./getDynamicWindowsDesktop"));

export { GetGithubConnectorArgs, GetGithubConnectorResult, GetGithubConnectorOutputArgs } from "./getGithubConnector";
export const getGithubConnector: typeof import("./getGithubConnector").getGithubConnector = null as any;
export const getGithubConnectorOutput: typeof import("./getGithubConnector").getGithubConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getGithubConnector","getGithubConnectorOutput"], () => require("./getGithubConnector"));

export { GetInstallerArgs, GetInstallerResult, GetInstallerOutputArgs } from "./getInstaller";
export const getInstaller: typeof import("./getInstaller").getInstaller = null as any;
export const getInstallerOutput: typeof import("./getInstaller").getInstallerOutput = null as any;
utilities.lazyLoad(exports, ["getInstaller","getInstallerOutput"], () => require("./getInstaller"));

export { GetLoginRuleArgs, GetLoginRuleResult, GetLoginRuleOutputArgs } from "./getLoginRule";
export const getLoginRule: typeof import("./getLoginRule").getLoginRule = null as any;
export const getLoginRuleOutput: typeof import("./getLoginRule").getLoginRuleOutput = null as any;
utilities.lazyLoad(exports, ["getLoginRule","getLoginRuleOutput"], () => require("./getLoginRule"));

export { GetOidcConnectorArgs, GetOidcConnectorResult, GetOidcConnectorOutputArgs } from "./getOidcConnector";
export const getOidcConnector: typeof import("./getOidcConnector").getOidcConnector = null as any;
export const getOidcConnectorOutput: typeof import("./getOidcConnector").getOidcConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getOidcConnector","getOidcConnectorOutput"], () => require("./getOidcConnector"));

export { GetOktaImportRuleArgs, GetOktaImportRuleResult, GetOktaImportRuleOutputArgs } from "./getOktaImportRule";
export const getOktaImportRule: typeof import("./getOktaImportRule").getOktaImportRule = null as any;
export const getOktaImportRuleOutput: typeof import("./getOktaImportRule").getOktaImportRuleOutput = null as any;
utilities.lazyLoad(exports, ["getOktaImportRule","getOktaImportRuleOutput"], () => require("./getOktaImportRule"));

export { GetProvisionTokenArgs, GetProvisionTokenResult, GetProvisionTokenOutputArgs } from "./getProvisionToken";
export const getProvisionToken: typeof import("./getProvisionToken").getProvisionToken = null as any;
export const getProvisionTokenOutput: typeof import("./getProvisionToken").getProvisionTokenOutput = null as any;
utilities.lazyLoad(exports, ["getProvisionToken","getProvisionTokenOutput"], () => require("./getProvisionToken"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetSamlConnectorArgs, GetSamlConnectorResult, GetSamlConnectorOutputArgs } from "./getSamlConnector";
export const getSamlConnector: typeof import("./getSamlConnector").getSamlConnector = null as any;
export const getSamlConnectorOutput: typeof import("./getSamlConnector").getSamlConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getSamlConnector","getSamlConnectorOutput"], () => require("./getSamlConnector"));

export { GetSessionRecordingConfigArgs, GetSessionRecordingConfigResult, GetSessionRecordingConfigOutputArgs } from "./getSessionRecordingConfig";
export const getSessionRecordingConfig: typeof import("./getSessionRecordingConfig").getSessionRecordingConfig = null as any;
export const getSessionRecordingConfigOutput: typeof import("./getSessionRecordingConfig").getSessionRecordingConfigOutput = null as any;
utilities.lazyLoad(exports, ["getSessionRecordingConfig","getSessionRecordingConfigOutput"], () => require("./getSessionRecordingConfig"));

export { GetStaticHostUserArgs, GetStaticHostUserResult, GetStaticHostUserOutputArgs } from "./getStaticHostUser";
export const getStaticHostUser: typeof import("./getStaticHostUser").getStaticHostUser = null as any;
export const getStaticHostUserOutput: typeof import("./getStaticHostUser").getStaticHostUserOutput = null as any;
utilities.lazyLoad(exports, ["getStaticHostUser","getStaticHostUserOutput"], () => require("./getStaticHostUser"));

export { GetTrustedClusterArgs, GetTrustedClusterResult, GetTrustedClusterOutputArgs } from "./getTrustedCluster";
export const getTrustedCluster: typeof import("./getTrustedCluster").getTrustedCluster = null as any;
export const getTrustedClusterOutput: typeof import("./getTrustedCluster").getTrustedClusterOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedCluster","getTrustedClusterOutput"], () => require("./getTrustedCluster"));

export { GetTrustedDeviceArgs, GetTrustedDeviceResult, GetTrustedDeviceOutputArgs } from "./getTrustedDevice";
export const getTrustedDevice: typeof import("./getTrustedDevice").getTrustedDevice = null as any;
export const getTrustedDeviceOutput: typeof import("./getTrustedDevice").getTrustedDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedDevice","getTrustedDeviceOutput"], () => require("./getTrustedDevice"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetWorkloadIdentityArgs, GetWorkloadIdentityResult, GetWorkloadIdentityOutputArgs } from "./getWorkloadIdentity";
export const getWorkloadIdentity: typeof import("./getWorkloadIdentity").getWorkloadIdentity = null as any;
export const getWorkloadIdentityOutput: typeof import("./getWorkloadIdentity").getWorkloadIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadIdentity","getWorkloadIdentityOutput"], () => require("./getWorkloadIdentity"));

export { GithubConnectorArgs, GithubConnectorState } from "./githubConnector";
export type GithubConnector = import("./githubConnector").GithubConnector;
export const GithubConnector: typeof import("./githubConnector").GithubConnector = null as any;
utilities.lazyLoad(exports, ["GithubConnector"], () => require("./githubConnector"));

export { InstallerArgs, InstallerState } from "./installer";
export type Installer = import("./installer").Installer;
export const Installer: typeof import("./installer").Installer = null as any;
utilities.lazyLoad(exports, ["Installer"], () => require("./installer"));

export { LoginRuleArgs, LoginRuleState } from "./loginRule";
export type LoginRule = import("./loginRule").LoginRule;
export const LoginRule: typeof import("./loginRule").LoginRule = null as any;
utilities.lazyLoad(exports, ["LoginRule"], () => require("./loginRule"));

export { OidcConnectorArgs, OidcConnectorState } from "./oidcConnector";
export type OidcConnector = import("./oidcConnector").OidcConnector;
export const OidcConnector: typeof import("./oidcConnector").OidcConnector = null as any;
utilities.lazyLoad(exports, ["OidcConnector"], () => require("./oidcConnector"));

export { OktaImportRuleArgs, OktaImportRuleState } from "./oktaImportRule";
export type OktaImportRule = import("./oktaImportRule").OktaImportRule;
export const OktaImportRule: typeof import("./oktaImportRule").OktaImportRule = null as any;
utilities.lazyLoad(exports, ["OktaImportRule"], () => require("./oktaImportRule"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProvisionTokenArgs, ProvisionTokenState } from "./provisionToken";
export type ProvisionToken = import("./provisionToken").ProvisionToken;
export const ProvisionToken: typeof import("./provisionToken").ProvisionToken = null as any;
utilities.lazyLoad(exports, ["ProvisionToken"], () => require("./provisionToken"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { SamlConnectorArgs, SamlConnectorState } from "./samlConnector";
export type SamlConnector = import("./samlConnector").SamlConnector;
export const SamlConnector: typeof import("./samlConnector").SamlConnector = null as any;
utilities.lazyLoad(exports, ["SamlConnector"], () => require("./samlConnector"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { SessionRecordingConfigArgs, SessionRecordingConfigState } from "./sessionRecordingConfig";
export type SessionRecordingConfig = import("./sessionRecordingConfig").SessionRecordingConfig;
export const SessionRecordingConfig: typeof import("./sessionRecordingConfig").SessionRecordingConfig = null as any;
utilities.lazyLoad(exports, ["SessionRecordingConfig"], () => require("./sessionRecordingConfig"));

export { StaticHostUserArgs, StaticHostUserState } from "./staticHostUser";
export type StaticHostUser = import("./staticHostUser").StaticHostUser;
export const StaticHostUser: typeof import("./staticHostUser").StaticHostUser = null as any;
utilities.lazyLoad(exports, ["StaticHostUser"], () => require("./staticHostUser"));

export { TrustedClusterArgs, TrustedClusterState } from "./trustedCluster";
export type TrustedCluster = import("./trustedCluster").TrustedCluster;
export const TrustedCluster: typeof import("./trustedCluster").TrustedCluster = null as any;
utilities.lazyLoad(exports, ["TrustedCluster"], () => require("./trustedCluster"));

export { TrustedDeviceArgs, TrustedDeviceState } from "./trustedDevice";
export type TrustedDevice = import("./trustedDevice").TrustedDevice;
export const TrustedDevice: typeof import("./trustedDevice").TrustedDevice = null as any;
utilities.lazyLoad(exports, ["TrustedDevice"], () => require("./trustedDevice"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { WorkloadIdentityArgs, WorkloadIdentityState } from "./workloadIdentity";
export type WorkloadIdentity = import("./workloadIdentity").WorkloadIdentity;
export const WorkloadIdentity: typeof import("./workloadIdentity").WorkloadIdentity = null as any;
utilities.lazyLoad(exports, ["WorkloadIdentity"], () => require("./workloadIdentity"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "teleport:index/accessList:AccessList":
                return new AccessList(name, <any>undefined, { urn })
            case "teleport:index/accessMonitoringRule:AccessMonitoringRule":
                return new AccessMonitoringRule(name, <any>undefined, { urn })
            case "teleport:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "teleport:index/authPreference:AuthPreference":
                return new AuthPreference(name, <any>undefined, { urn })
            case "teleport:index/autoupdateConfig:AutoupdateConfig":
                return new AutoupdateConfig(name, <any>undefined, { urn })
            case "teleport:index/autoupdateVersion:AutoupdateVersion":
                return new AutoupdateVersion(name, <any>undefined, { urn })
            case "teleport:index/bot:Bot":
                return new Bot(name, <any>undefined, { urn })
            case "teleport:index/clusterMaintenanceConfig:ClusterMaintenanceConfig":
                return new ClusterMaintenanceConfig(name, <any>undefined, { urn })
            case "teleport:index/clusterNetworkingConfig:ClusterNetworkingConfig":
                return new ClusterNetworkingConfig(name, <any>undefined, { urn })
            case "teleport:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "teleport:index/dynamicWindowsDesktop:DynamicWindowsDesktop":
                return new DynamicWindowsDesktop(name, <any>undefined, { urn })
            case "teleport:index/githubConnector:GithubConnector":
                return new GithubConnector(name, <any>undefined, { urn })
            case "teleport:index/installer:Installer":
                return new Installer(name, <any>undefined, { urn })
            case "teleport:index/loginRule:LoginRule":
                return new LoginRule(name, <any>undefined, { urn })
            case "teleport:index/oidcConnector:OidcConnector":
                return new OidcConnector(name, <any>undefined, { urn })
            case "teleport:index/oktaImportRule:OktaImportRule":
                return new OktaImportRule(name, <any>undefined, { urn })
            case "teleport:index/provisionToken:ProvisionToken":
                return new ProvisionToken(name, <any>undefined, { urn })
            case "teleport:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "teleport:index/samlConnector:SamlConnector":
                return new SamlConnector(name, <any>undefined, { urn })
            case "teleport:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "teleport:index/sessionRecordingConfig:SessionRecordingConfig":
                return new SessionRecordingConfig(name, <any>undefined, { urn })
            case "teleport:index/staticHostUser:StaticHostUser":
                return new StaticHostUser(name, <any>undefined, { urn })
            case "teleport:index/trustedCluster:TrustedCluster":
                return new TrustedCluster(name, <any>undefined, { urn })
            case "teleport:index/trustedDevice:TrustedDevice":
                return new TrustedDevice(name, <any>undefined, { urn })
            case "teleport:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "teleport:index/workloadIdentity:WorkloadIdentity":
                return new WorkloadIdentity(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("teleport", "index/accessList", _module)
pulumi.runtime.registerResourceModule("teleport", "index/accessMonitoringRule", _module)
pulumi.runtime.registerResourceModule("teleport", "index/app", _module)
pulumi.runtime.registerResourceModule("teleport", "index/authPreference", _module)
pulumi.runtime.registerResourceModule("teleport", "index/autoupdateConfig", _module)
pulumi.runtime.registerResourceModule("teleport", "index/autoupdateVersion", _module)
pulumi.runtime.registerResourceModule("teleport", "index/bot", _module)
pulumi.runtime.registerResourceModule("teleport", "index/clusterMaintenanceConfig", _module)
pulumi.runtime.registerResourceModule("teleport", "index/clusterNetworkingConfig", _module)
pulumi.runtime.registerResourceModule("teleport", "index/database", _module)
pulumi.runtime.registerResourceModule("teleport", "index/dynamicWindowsDesktop", _module)
pulumi.runtime.registerResourceModule("teleport", "index/githubConnector", _module)
pulumi.runtime.registerResourceModule("teleport", "index/installer", _module)
pulumi.runtime.registerResourceModule("teleport", "index/loginRule", _module)
pulumi.runtime.registerResourceModule("teleport", "index/oidcConnector", _module)
pulumi.runtime.registerResourceModule("teleport", "index/oktaImportRule", _module)
pulumi.runtime.registerResourceModule("teleport", "index/provisionToken", _module)
pulumi.runtime.registerResourceModule("teleport", "index/role", _module)
pulumi.runtime.registerResourceModule("teleport", "index/samlConnector", _module)
pulumi.runtime.registerResourceModule("teleport", "index/server", _module)
pulumi.runtime.registerResourceModule("teleport", "index/sessionRecordingConfig", _module)
pulumi.runtime.registerResourceModule("teleport", "index/staticHostUser", _module)
pulumi.runtime.registerResourceModule("teleport", "index/trustedCluster", _module)
pulumi.runtime.registerResourceModule("teleport", "index/trustedDevice", _module)
pulumi.runtime.registerResourceModule("teleport", "index/user", _module)
pulumi.runtime.registerResourceModule("teleport", "index/workloadIdentity", _module)
pulumi.runtime.registerResourcePackage("teleport", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:teleport") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
