// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("teleport");

/**
 * host:port of the Teleport address. This can be the Teleport Proxy Service address (port 443 or 4080) or the Teleport
 * Auth Service address (port 3025). This can also be set with the environment variable `TF_TELEPORT_ADDR`.
 */
export declare const addr: string | undefined;
Object.defineProperty(exports, "addr", {
    get() {
        return __config.get("addr");
    },
    enumerable: true,
});

export declare const audienceTag: string | undefined;
Object.defineProperty(exports, "audienceTag", {
    get() {
        return __config.get("audienceTag");
    },
    enumerable: true,
});

/**
 * Base64 encoded TLS auth certificate. This can also be set with the environment variable `TF_TELEPORT_CERT_BASE64`.
 */
export declare const certBase64: string | undefined;
Object.defineProperty(exports, "certBase64", {
    get() {
        return __config.get("certBase64");
    },
    enumerable: true,
});

/**
 * Path to Teleport auth certificate file. This can also be set with the environment variable `TF_TELEPORT_CERT`.
 */
export declare const certPath: string | undefined;
Object.defineProperty(exports, "certPath", {
    get() {
        return __config.get("certPath");
    },
    enumerable: true,
});

/**
 * DialTimeout sets timeout when trying to connect to the server. This can also be set with the environment variable
 * `TF_TELEPORT_DIAL_TIMEOUT_DURATION`.
 */
export declare const dialTimeoutDuration: string | undefined;
Object.defineProperty(exports, "dialTimeoutDuration", {
    get() {
        return __config.get("dialTimeoutDuration");
    },
    enumerable: true,
});

/**
 * Environment variable used to fetch the ID token issued by GitLab for the `gitlab` join method. If unset, this defaults
 * to `TBOT_GITLAB_JWT`. This can also be set with the environment variable `TF_TELEPORT_GITLAB_ID_TOKEN_ENV_VAR`.
 */
export declare const gitlabIdTokenEnvVar: string | undefined;
Object.defineProperty(exports, "gitlabIdTokenEnvVar", {
    get() {
        return __config.get("gitlabIdTokenEnvVar");
    },
    enumerable: true,
});

/**
 * Teleport identity file content. This can also be set with the environment variable `TF_TELEPORT_IDENTITY_FILE`.
 */
export declare const identityFile: string | undefined;
Object.defineProperty(exports, "identityFile", {
    get() {
        return __config.get("identityFile");
    },
    enumerable: true,
});

/**
 * Teleport identity file content base64 encoded. This can also be set with the environment variable
 * `TF_TELEPORT_IDENTITY_FILE_BASE64`.
 */
export declare const identityFileBase64: string | undefined;
Object.defineProperty(exports, "identityFileBase64", {
    get() {
        return __config.get("identityFileBase64");
    },
    enumerable: true,
});

/**
 * Teleport identity file path. This can also be set with the environment variable `TF_TELEPORT_IDENTITY_FILE_PATH`.
 */
export declare const identityFilePath: string | undefined;
Object.defineProperty(exports, "identityFilePath", {
    get() {
        return __config.get("identityFilePath");
    },
    enumerable: true,
});

export declare const joinMethod: string | undefined;
Object.defineProperty(exports, "joinMethod", {
    get() {
        return __config.get("joinMethod");
    },
    enumerable: true,
});

/**
 * Name of the token used for the native MachineID joining. This value is not sensitive for delegated join methods. This
 * can also be set with the environment variable `TF_TELEPORT_JOIN_TOKEN`.
 */
export declare const joinToken: string | undefined;
Object.defineProperty(exports, "joinToken", {
    get() {
        return __config.get("joinToken");
    },
    enumerable: true,
});

/**
 * Base64 encoded TLS auth key. This can also be set with the environment variable `TF_TELEPORT_KEY_BASE64`.
 */
export declare const keyBase64: string | undefined;
Object.defineProperty(exports, "keyBase64", {
    get() {
        return __config.get("keyBase64");
    },
    enumerable: true,
});

/**
 * Path to Teleport auth key file. This can also be set with the environment variable `TF_TELEPORT_KEY`.
 */
export declare const keyPath: string | undefined;
Object.defineProperty(exports, "keyPath", {
    get() {
        return __config.get("keyPath");
    },
    enumerable: true,
});

/**
 * Teleport profile path. This can also be set with the environment variable `TF_TELEPORT_PROFILE_PATH`.
 */
export declare const profileDir: string | undefined;
Object.defineProperty(exports, "profileDir", {
    get() {
        return __config.get("profileDir");
    },
    enumerable: true,
});

/**
 * Teleport profile name. This can also be set with the environment variable `TF_TELEPORT_PROFILE_NAME`.
 */
export declare const profileName: string | undefined;
Object.defineProperty(exports, "profileName", {
    get() {
        return __config.get("profileName");
    },
    enumerable: true,
});

/**
 * Retry algorithm when the API returns 'not found': base duration between retries (https://pkg.go.dev/time#ParseDuration).
 * This can also be set with the environment variable `TF_TELEPORT_RETRY_BASE_DURATION`.
 */
export declare const retryBaseDuration: string | undefined;
Object.defineProperty(exports, "retryBaseDuration", {
    get() {
        return __config.get("retryBaseDuration");
    },
    enumerable: true,
});

/**
 * Retry algorithm when the API returns 'not found': max duration between retries (https://pkg.go.dev/time#ParseDuration).
 * This can also be set with the environment variable `TF_TELEPORT_RETRY_CAP_DURATION`.
 */
export declare const retryCapDuration: string | undefined;
Object.defineProperty(exports, "retryCapDuration", {
    get() {
        return __config.get("retryCapDuration");
    },
    enumerable: true,
});

/**
 * Retry algorithm when the API returns 'not found': max tries. This can also be set with the environment variable
 * `TF_TELEPORT_RETRY_MAX_TRIES`.
 */
export declare const retryMaxTries: string | undefined;
Object.defineProperty(exports, "retryMaxTries", {
    get() {
        return __config.get("retryMaxTries");
    },
    enumerable: true,
});

/**
 * Base64 encoded Root CA. This can also be set with the environment variable `TF_TELEPORT_CA_BASE64`.
 */
export declare const rootCaBase64: string | undefined;
Object.defineProperty(exports, "rootCaBase64", {
    get() {
        return __config.get("rootCaBase64");
    },
    enumerable: true,
});

/**
 * Path to Teleport Root CA. This can also be set with the environment variable `TF_TELEPORT_ROOT_CA`.
 */
export declare const rootCaPath: string | undefined;
Object.defineProperty(exports, "rootCaPath", {
    get() {
        return __config.get("rootCaPath");
    },
    enumerable: true,
});

