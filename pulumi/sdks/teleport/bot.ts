// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Bot extends pulumi.CustomResource {
    /**
     * Get an existing Bot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BotState, opts?: pulumi.CustomResourceOptions): Bot {
        return new Bot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'teleport:index/bot:Bot';

    /**
     * Returns true if the given object is an instance of Bot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bot.__pulumiType;
    }

    /**
     * The name of the bot, i.e. the unprefixed User name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the generated bot role
     */
    public /*out*/ readonly roleName!: pulumi.Output<string>;
    /**
     * A list of roles the created bot should be allowed to assume via role impersonation.
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * Deprecated. This field is not required anymore and has no effect.
     */
    public readonly tokenId!: pulumi.Output<string | undefined>;
    /**
     * Deprecated. This field is not required anymore and has no effect.
     */
    public readonly tokenTtl!: pulumi.Output<string>;
    public readonly traits!: pulumi.Output<{[key: string]: string[]} | undefined>;
    /**
     * The name of the generated bot user
     */
    public /*out*/ readonly userName!: pulumi.Output<string>;

    /**
     * Create a Bot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BotArgs | BotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BotState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["tokenId"] = state ? state.tokenId : undefined;
            resourceInputs["tokenTtl"] = state ? state.tokenTtl : undefined;
            resourceInputs["traits"] = state ? state.traits : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as BotArgs | undefined;
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["tokenId"] = args?.tokenId ? pulumi.secret(args.tokenId) : undefined;
            resourceInputs["tokenTtl"] = args ? args.tokenTtl : undefined;
            resourceInputs["traits"] = args ? args.traits : undefined;
            resourceInputs["roleName"] = undefined /*out*/;
            resourceInputs["userName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tokenId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Bot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Bot resources.
 */
export interface BotState {
    /**
     * The name of the bot, i.e. the unprefixed User name
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the generated bot role
     */
    roleName?: pulumi.Input<string>;
    /**
     * A list of roles the created bot should be allowed to assume via role impersonation.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Deprecated. This field is not required anymore and has no effect.
     */
    tokenId?: pulumi.Input<string>;
    /**
     * Deprecated. This field is not required anymore and has no effect.
     */
    tokenTtl?: pulumi.Input<string>;
    traits?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * The name of the generated bot user
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Bot resource.
 */
export interface BotArgs {
    /**
     * The name of the bot, i.e. the unprefixed User name
     */
    name?: pulumi.Input<string>;
    /**
     * A list of roles the created bot should be allowed to assume via role impersonation.
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Deprecated. This field is not required anymore and has no effect.
     */
    tokenId?: pulumi.Input<string>;
    /**
     * Deprecated. This field is not required anymore and has no effect.
     */
    tokenTtl?: pulumi.Input<string>;
    traits?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
}
