// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoginRule extends pulumi.CustomResource {
    /**
     * Get an existing LoginRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoginRuleState, opts?: pulumi.CustomResourceOptions): LoginRule {
        return new LoginRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'teleport:index/loginRule:LoginRule';

    /**
     * Returns true if the given object is an instance of LoginRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoginRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoginRule.__pulumiType;
    }

    /**
     * Metadata is resource metadata.
     */
    public readonly metadata!: pulumi.Output<outputs.LoginRuleMetadata | undefined>;
    /**
     * Priority is the priority of the login rule relative to other login rules in the same cluster. Login rules with a lower
     * numbered priority will be evaluated first.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * TraitsExpression is a predicate expression which should return the desired traits for the user upon login.
     */
    public readonly traitsExpression!: pulumi.Output<string | undefined>;
    /**
     * TraitsMap is a map of trait keys to lists of predicate expressions which should evaluate to the desired values for that
     * trait.
     */
    public readonly traitsMap!: pulumi.Output<{[key: string]: outputs.LoginRuleTraitsMap} | undefined>;
    /**
     * Version is the resource version.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a LoginRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoginRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoginRuleArgs | LoginRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoginRuleState | undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["traitsExpression"] = state ? state.traitsExpression : undefined;
            resourceInputs["traitsMap"] = state ? state.traitsMap : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as LoginRuleArgs | undefined;
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["traitsExpression"] = args ? args.traitsExpression : undefined;
            resourceInputs["traitsMap"] = args ? args.traitsMap : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoginRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoginRule resources.
 */
export interface LoginRuleState {
    /**
     * Metadata is resource metadata.
     */
    metadata?: pulumi.Input<inputs.LoginRuleMetadata>;
    /**
     * Priority is the priority of the login rule relative to other login rules in the same cluster. Login rules with a lower
     * numbered priority will be evaluated first.
     */
    priority?: pulumi.Input<number>;
    /**
     * TraitsExpression is a predicate expression which should return the desired traits for the user upon login.
     */
    traitsExpression?: pulumi.Input<string>;
    /**
     * TraitsMap is a map of trait keys to lists of predicate expressions which should evaluate to the desired values for that
     * trait.
     */
    traitsMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.LoginRuleTraitsMap>}>;
    /**
     * Version is the resource version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoginRule resource.
 */
export interface LoginRuleArgs {
    /**
     * Metadata is resource metadata.
     */
    metadata?: pulumi.Input<inputs.LoginRuleMetadata>;
    /**
     * Priority is the priority of the login rule relative to other login rules in the same cluster. Login rules with a lower
     * numbered priority will be evaluated first.
     */
    priority: pulumi.Input<number>;
    /**
     * TraitsExpression is a predicate expression which should return the desired traits for the user upon login.
     */
    traitsExpression?: pulumi.Input<string>;
    /**
     * TraitsMap is a map of trait keys to lists of predicate expressions which should evaluate to the desired values for that
     * trait.
     */
    traitsMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.LoginRuleTraitsMap>}>;
    /**
     * Version is the resource version.
     */
    version: pulumi.Input<string>;
}
