// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the teleport package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'teleport';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * host:port of the Teleport address. This can be the Teleport Proxy Service address (port 443 or 4080) or the Teleport
     * Auth Service address (port 3025). This can also be set with the environment variable `TF_TELEPORT_ADDR`.
     */
    public readonly addr!: pulumi.Output<string | undefined>;
    public readonly audienceTag!: pulumi.Output<string | undefined>;
    /**
     * Base64 encoded TLS auth certificate. This can also be set with the environment variable `TF_TELEPORT_CERT_BASE64`.
     */
    public readonly certBase64!: pulumi.Output<string | undefined>;
    /**
     * Path to Teleport auth certificate file. This can also be set with the environment variable `TF_TELEPORT_CERT`.
     */
    public readonly certPath!: pulumi.Output<string | undefined>;
    /**
     * DialTimeout sets timeout when trying to connect to the server. This can also be set with the environment variable
     * `TF_TELEPORT_DIAL_TIMEOUT_DURATION`.
     */
    public readonly dialTimeoutDuration!: pulumi.Output<string | undefined>;
    /**
     * Environment variable used to fetch the ID token issued by GitLab for the `gitlab` join method. If unset, this defaults
     * to `TBOT_GITLAB_JWT`. This can also be set with the environment variable `TF_TELEPORT_GITLAB_ID_TOKEN_ENV_VAR`.
     */
    public readonly gitlabIdTokenEnvVar!: pulumi.Output<string | undefined>;
    /**
     * Teleport identity file content. This can also be set with the environment variable `TF_TELEPORT_IDENTITY_FILE`.
     */
    public readonly identityFile!: pulumi.Output<string | undefined>;
    /**
     * Teleport identity file content base64 encoded. This can also be set with the environment variable
     * `TF_TELEPORT_IDENTITY_FILE_BASE64`.
     */
    public readonly identityFileBase64!: pulumi.Output<string | undefined>;
    /**
     * Teleport identity file path. This can also be set with the environment variable `TF_TELEPORT_IDENTITY_FILE_PATH`.
     */
    public readonly identityFilePath!: pulumi.Output<string | undefined>;
    public readonly joinMethod!: pulumi.Output<string | undefined>;
    /**
     * Name of the token used for the native MachineID joining. This value is not sensitive for delegated join methods. This
     * can also be set with the environment variable `TF_TELEPORT_JOIN_TOKEN`.
     */
    public readonly joinToken!: pulumi.Output<string | undefined>;
    /**
     * Base64 encoded TLS auth key. This can also be set with the environment variable `TF_TELEPORT_KEY_BASE64`.
     */
    public readonly keyBase64!: pulumi.Output<string | undefined>;
    /**
     * Path to Teleport auth key file. This can also be set with the environment variable `TF_TELEPORT_KEY`.
     */
    public readonly keyPath!: pulumi.Output<string | undefined>;
    /**
     * Teleport profile path. This can also be set with the environment variable `TF_TELEPORT_PROFILE_PATH`.
     */
    public readonly profileDir!: pulumi.Output<string | undefined>;
    /**
     * Teleport profile name. This can also be set with the environment variable `TF_TELEPORT_PROFILE_NAME`.
     */
    public readonly profileName!: pulumi.Output<string | undefined>;
    /**
     * Retry algorithm when the API returns 'not found': base duration between retries (https://pkg.go.dev/time#ParseDuration).
     * This can also be set with the environment variable `TF_TELEPORT_RETRY_BASE_DURATION`.
     */
    public readonly retryBaseDuration!: pulumi.Output<string | undefined>;
    /**
     * Retry algorithm when the API returns 'not found': max duration between retries (https://pkg.go.dev/time#ParseDuration).
     * This can also be set with the environment variable `TF_TELEPORT_RETRY_CAP_DURATION`.
     */
    public readonly retryCapDuration!: pulumi.Output<string | undefined>;
    /**
     * Retry algorithm when the API returns 'not found': max tries. This can also be set with the environment variable
     * `TF_TELEPORT_RETRY_MAX_TRIES`.
     */
    public readonly retryMaxTries!: pulumi.Output<string | undefined>;
    /**
     * Base64 encoded Root CA. This can also be set with the environment variable `TF_TELEPORT_CA_BASE64`.
     */
    public readonly rootCaBase64!: pulumi.Output<string | undefined>;
    /**
     * Path to Teleport Root CA. This can also be set with the environment variable `TF_TELEPORT_ROOT_CA`.
     */
    public readonly rootCaPath!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["addr"] = args ? args.addr : undefined;
            resourceInputs["audienceTag"] = args ? args.audienceTag : undefined;
            resourceInputs["certBase64"] = args ? args.certBase64 : undefined;
            resourceInputs["certPath"] = args ? args.certPath : undefined;
            resourceInputs["dialTimeoutDuration"] = args ? args.dialTimeoutDuration : undefined;
            resourceInputs["gitlabIdTokenEnvVar"] = args ? args.gitlabIdTokenEnvVar : undefined;
            resourceInputs["identityFile"] = args?.identityFile ? pulumi.secret(args.identityFile) : undefined;
            resourceInputs["identityFileBase64"] = args?.identityFileBase64 ? pulumi.secret(args.identityFileBase64) : undefined;
            resourceInputs["identityFilePath"] = args ? args.identityFilePath : undefined;
            resourceInputs["joinMethod"] = args ? args.joinMethod : undefined;
            resourceInputs["joinToken"] = args ? args.joinToken : undefined;
            resourceInputs["keyBase64"] = args?.keyBase64 ? pulumi.secret(args.keyBase64) : undefined;
            resourceInputs["keyPath"] = args ? args.keyPath : undefined;
            resourceInputs["profileDir"] = args ? args.profileDir : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["retryBaseDuration"] = args ? args.retryBaseDuration : undefined;
            resourceInputs["retryCapDuration"] = args ? args.retryCapDuration : undefined;
            resourceInputs["retryMaxTries"] = args ? args.retryMaxTries : undefined;
            resourceInputs["rootCaBase64"] = args ? args.rootCaBase64 : undefined;
            resourceInputs["rootCaPath"] = args ? args.rootCaPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["identityFile", "identityFileBase64", "keyBase64"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * host:port of the Teleport address. This can be the Teleport Proxy Service address (port 443 or 4080) or the Teleport
     * Auth Service address (port 3025). This can also be set with the environment variable `TF_TELEPORT_ADDR`.
     */
    addr?: pulumi.Input<string>;
    audienceTag?: pulumi.Input<string>;
    /**
     * Base64 encoded TLS auth certificate. This can also be set with the environment variable `TF_TELEPORT_CERT_BASE64`.
     */
    certBase64?: pulumi.Input<string>;
    /**
     * Path to Teleport auth certificate file. This can also be set with the environment variable `TF_TELEPORT_CERT`.
     */
    certPath?: pulumi.Input<string>;
    /**
     * DialTimeout sets timeout when trying to connect to the server. This can also be set with the environment variable
     * `TF_TELEPORT_DIAL_TIMEOUT_DURATION`.
     */
    dialTimeoutDuration?: pulumi.Input<string>;
    /**
     * Environment variable used to fetch the ID token issued by GitLab for the `gitlab` join method. If unset, this defaults
     * to `TBOT_GITLAB_JWT`. This can also be set with the environment variable `TF_TELEPORT_GITLAB_ID_TOKEN_ENV_VAR`.
     */
    gitlabIdTokenEnvVar?: pulumi.Input<string>;
    /**
     * Teleport identity file content. This can also be set with the environment variable `TF_TELEPORT_IDENTITY_FILE`.
     */
    identityFile?: pulumi.Input<string>;
    /**
     * Teleport identity file content base64 encoded. This can also be set with the environment variable
     * `TF_TELEPORT_IDENTITY_FILE_BASE64`.
     */
    identityFileBase64?: pulumi.Input<string>;
    /**
     * Teleport identity file path. This can also be set with the environment variable `TF_TELEPORT_IDENTITY_FILE_PATH`.
     */
    identityFilePath?: pulumi.Input<string>;
    joinMethod?: pulumi.Input<string>;
    /**
     * Name of the token used for the native MachineID joining. This value is not sensitive for delegated join methods. This
     * can also be set with the environment variable `TF_TELEPORT_JOIN_TOKEN`.
     */
    joinToken?: pulumi.Input<string>;
    /**
     * Base64 encoded TLS auth key. This can also be set with the environment variable `TF_TELEPORT_KEY_BASE64`.
     */
    keyBase64?: pulumi.Input<string>;
    /**
     * Path to Teleport auth key file. This can also be set with the environment variable `TF_TELEPORT_KEY`.
     */
    keyPath?: pulumi.Input<string>;
    /**
     * Teleport profile path. This can also be set with the environment variable `TF_TELEPORT_PROFILE_PATH`.
     */
    profileDir?: pulumi.Input<string>;
    /**
     * Teleport profile name. This can also be set with the environment variable `TF_TELEPORT_PROFILE_NAME`.
     */
    profileName?: pulumi.Input<string>;
    /**
     * Retry algorithm when the API returns 'not found': base duration between retries (https://pkg.go.dev/time#ParseDuration).
     * This can also be set with the environment variable `TF_TELEPORT_RETRY_BASE_DURATION`.
     */
    retryBaseDuration?: pulumi.Input<string>;
    /**
     * Retry algorithm when the API returns 'not found': max duration between retries (https://pkg.go.dev/time#ParseDuration).
     * This can also be set with the environment variable `TF_TELEPORT_RETRY_CAP_DURATION`.
     */
    retryCapDuration?: pulumi.Input<string>;
    /**
     * Retry algorithm when the API returns 'not found': max tries. This can also be set with the environment variable
     * `TF_TELEPORT_RETRY_MAX_TRIES`.
     */
    retryMaxTries?: pulumi.Input<string>;
    /**
     * Base64 encoded Root CA. This can also be set with the environment variable `TF_TELEPORT_CA_BASE64`.
     */
    rootCaBase64?: pulumi.Input<string>;
    /**
     * Path to Teleport Root CA. This can also be set with the environment variable `TF_TELEPORT_ROOT_CA`.
     */
    rootCaPath?: pulumi.Input<string>;
}
